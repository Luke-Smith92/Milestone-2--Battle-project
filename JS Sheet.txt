/* ------------ Data ------------- */
const CARDS = [
  { id:"shadow-elf", name:"Shadow Elf", type:"Dark", img:"images/shadow-elf.png", maxHp:110,
    attacks:[ {name:"Shadow Dagger",power:18,accuracy:.95}, {name:"Night Veil",power:28,accuracy:.8} ] },
  { id:"ember-drake", name:"Ember Drake", type:"Fire", img:"images/ember-drake.png", maxHp:120,
    attacks:[ {name:"Flame Bite",power:20,accuracy:.9}, {name:"Inferno Burst",power:32,accuracy:.7} ] },
  { id:"frost-guardian", name:"Frost Guardian", type:"Ice", img:"images/frost-guardian.png", maxHp:130,
    attacks:[ {name:"Ice Lance",power:16,accuracy:.95}, {name:"Blizzard Wall",power:24,accuracy:.85} ] },
  { id:"storm-witch", name:"Storm Witch", type:"Lightning", img:"images/storm-witch.png", maxHp:95,
    attacks:[ {name:"Chain Spark",power:22,accuracy:.9}, {name:"Tempest",power:35,accuracy:.65} ] },
  { id:"oak-sentinel", name:"Oak Sentinel", type:"Earth", img:"images/oak-sentinel.png", maxHp:140,
    attacks:[ {name:"Root Slam",power:18,accuracy:.95}, {name:"Stone Quake",power:26,accuracy:.8} ] },
  { id:"tide-singer", name:"Tide Singer", type:"Water", img:"images/tide-singer.png", maxHp:105,
    attacks:[ {name:"Wave Slash",power:20,accuracy:.9}, {name:"Maelstrom",power:30,accuracy:.75} ] },
];

const PACKS = [
  { id:"demo", name:"Demo Pack", price:0,   cards:["shadow-elf","ember-drake"] },
  { id:"dark-elves", name:"Dark Elves Pack", price:200, cards:["shadow-elf","storm-witch"] },
  { id:"dragons", name:"Dragons Pack", price:300, cards:["ember-drake"] },
  { id:"guardians", name:"Guardians Pack", price:250, cards:["oak-sentinel","frost-guardian"] },
];

const NEWS = [
  { title:"Dark Elves Return to Moonwood",
    blurb:"Shadow operatives spotted near the northern glade. Scouts report new stealth runes woven into their gear." },
  { title:"Dragon Keepers Issue Heat Warning",
    blurb:"Ember Drakes run hot this season. Arena wards reinforcedâ€”handlers advise flame-resistant cloaks." },
  { title:"Storm Witch Verdict Split",
    blurb:"Council debates whether Tempest should be limited in ranked play. Decision postponed pending trials." }
];

/* --------- State + helpers --------- */
const views = ["home","select","battle","store"];
const $ = id => document.getElementById(id);
const coinEls = [ $("coinsHome"), $("coinsSelect"), $("coinsBattle"), $("coinsStore") ];

let save = loadSave();
function loadSave(){
  const s = JSON.parse(localStorage.getItem("aca-save")||"null");
  if (s && s.version===1) return s;
  const fresh = { version:1, coins:300, ownedPacks:["demo"] };
  localStorage.setItem("aca-save", JSON.stringify(fresh));
  return fresh;
}
function persist(){ localStorage.setItem("aca-save", JSON.stringify(save)); }
function ownedCardIds(){
  const set = new Set();
  save.ownedPacks.forEach(pid=>{
    const p = PACKS.find(x=>x.id===pid);
    if (p) p.cards.forEach(c=>set.add(c));
  });
  return [...set];
}
function getCard(id){ return CARDS.find(c=>c.id===id); }
function updateCoinsUI(){ coinEls.forEach(el=>el && (el.textContent = save.coins)); }

/* --------- Router --------- */
function show(id){
  views.forEach(v=>$(v).classList.add("hidden"));
  $(id).classList.remove("hidden");
  document.body.classList.remove("main-bg","arena-bg","store-bg");
  if (id==="home") document.body.classList.add("main-bg");
  if (id==="battle") document.body.classList.add("arena-bg");
  if (id==="store") document.body.classList.add("store-bg");
  updateCoinsUI();
}

/* --------- Home + News --------- */
function renderNews(){
  const wrap = $("newsGrid");
  wrap.innerHTML = "";
  NEWS.forEach(n=>{
    const card=document.createElement("article");
    card.className="news-card";
    card.tabIndex=0;
    card.innerHTML=`<h4>${n.title}</h4><div class="tooltip">${n.blurb}</div>`;
    wrap.appendChild(card);
  });

  // Touch toggle
  if ('ontouchstart' in window) {
    wrap.querySelectorAll('.news-card').forEach(card=>{
      card.addEventListener('click', ()=>{
        wrap.querySelectorAll('.news-card.open').forEach(c=>c!==card && c.classList.remove('open'));
        card.classList.toggle('open');
      });
    });
    document.addEventListener('click', e=>{
      if (!wrap.contains(e.target)) wrap.querySelectorAll('.news-card.open').forEach(c=>c.classList.remove('open'));
    });
  }
}
$("homeBattleBtn").onclick = ()=>{ renderSelect(); show("select"); };
$("homeStoreBtn").onclick  = ()=>{ renderStore(); show("store"); };

/* --------- Select --------- */
$("selectBackBtn").onclick = ()=> show("home");

function renderSelect(){
  const grid = $("selectGrid");
  grid.innerHTML="";
  const ids = ownedCardIds();
  const visible = [...new Set([...ids, ...CARDS.map(c=>c.id)])].slice(0,6);

  visible.forEach(id=>{
    const card = getCard(id);
    const owned = ids.includes(id);
    const div = document.createElement("div");
    div.className="card";
    div.innerHTML = `
      <h4>${card.name}</h4>
      <img src="${card.img}" alt="${card.name}">
      <div class="muted">${card.type} â€¢ HP ${card.maxHp}</div>
      <button class="btn ${owned?'primary':''}" ${owned?'':'disabled'}>${owned?'Select':'Locked'}</button>
    `;
    div.querySelector("button").onclick = ()=> owned && startBattle(card.id);
    grid.appendChild(div);
  });
}

/* --------- Battle (multi-attack) --------- */
$("battleHomeBtn").onclick  = ()=> show("home");
$("battleAgainBtn").onclick = ()=> show("select");
$("battleStoreBtn").onclick = ()=> { renderStore(); show("store"); };

let battle = null; // {player, ai, pHp, aHp, locked}

function startBattle(playerId){
  const player = JSON.parse(JSON.stringify(getCard(playerId)));
  const aiPool = CARDS.filter(c=>c.id!==playerId);
  const ai = JSON.parse(JSON.stringify(aiPool[Math.floor(Math.random()*aiPool.length)]));
  battle = { player, ai, pHp:player.maxHp, aHp:ai.maxHp, locked:false };
  renderBattle();
  show("battle");
}

function renderBattle(){
  const {player, ai} = battle;
  $("playerZone").innerHTML = cardBattleHtml("You", player, "playerHp");
  $("aiZone").innerHTML     = cardBattleHtml("AI",  ai,     "aiHp");
  updateHpBars();
  const row = $("attackRow"); row.innerHTML="";
  player.attacks.forEach((atk,i)=>{
    const b=document.createElement("button");
    b.className="btn";
    b.textContent=`${atk.name} (${atk.power})`;
    b.onclick = ()=> playerTurn(i);
    row.appendChild(b);
  });
  $("resultText").textContent="";
}
function cardBattleHtml(label, card, hpId){
  return `
    <div class="card">
      <h4>${label}</h4>
      <img src="${card.img}" alt="${card.name}">
      <div>${card.name}</div>
      <div class="hp-bar"><div id="${hpId}" class="hp-fill"></div></div>
    </div>
  `;
}
function updateHpBars(){
  $("playerHp").style.width = `${(battle.pHp / battle.player.maxHp)*100}%`;
  $("aiHp").style.width     = `${(battle.aHp / battle.ai.maxHp)*100}%`;
}
function playerTurn(i){
  if (battle.locked) return;
  battle.locked = true;
  const atk=battle.player.attacks[i];
  if (Math.random()<=atk.accuracy) battle.aHp=Math.max(0,battle.aHp-atk.power);
  updateHpBars();
  if (checkEnd()) return;
  setTimeout(aiTurn, 700);
}
function aiTurn(){
  const atk=battle.ai.attacks[Math.floor(Math.random()*battle.ai.attacks.length)];
  if (Math.random()<=atk.accuracy) battle.pHp=Math.max(0,battle.pHp-atk.power);
  updateHpBars();
  if (checkEnd()) return;
  battle.locked=false;
}
function checkEnd(){
  if (battle.pHp<=0 || battle.aHp<=0){
    $("resultText").textContent =
      (battle.pHp<=0 && battle.aHp<=0) ? "It's a draw!" :
      (battle.pHp<=0) ? "You lose!" : "You win!";
    return true;
  }
  return false;
}

/* --------- Store --------- */
$("storeBackBtn").onclick = ()=> show("home");

function renderStore(){
  const wrap = $("packList");
  wrap.innerHTML="";
  PACKS.forEach(p=>{
    const owned = save.ownedPacks.includes(p.id);
    const div=document.createElement("div");
    div.className="pack";
    div.innerHTML = `
      <h4>${p.name}</h4>
      <p class="muted">Contains: ${p.cards.map(id=>getCard(id).name).join(", ")}</p>
      <p class="price">Price: ${p.price} ðŸª™</p>
      <button class="btn ${owned?'':'primary'}" ${owned?'disabled':''}>${owned?'Owned':'Buy'}</button>
    `;
    const btn=div.querySelector("button");
    if (!owned){
      btn.onclick = ()=>{
        if (save.coins < p.price) { alert("Not enough coins!"); return; }
        save.coins -= p.price;
        save.ownedPacks.push(p.id);
        persist(); updateCoinsUI(); renderStore();
      };
    }
    wrap.appendChild(div);
  });
}

/* --------- Init --------- */
document.addEventListener('DOMContentLoaded', ()=>{
  updateCoinsUI();
  renderNews();
  show("home");
});
