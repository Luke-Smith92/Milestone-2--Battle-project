/* ------------ Data ------------- */
const CARDS = [
  { id:"shadow-elf", name:"Shadow Elf", type:"Dark", img:"images/shadow-elf.png", maxHp:110,
    attacks:[ {name:"Shadow Dagger",power:18,accuracy:.95}, {name:"Night Veil",power:28,accuracy:.8} ] },
  { id:"ember-drake", name:"Ember Drake", type:"Fire", img:"images/ember-drake.png", maxHp:120,
    attacks:[ {name:"Flame Bite",power:20,accuracy:.9}, {name:"Inferno Burst",power:32,accuracy:.7} ] },
  { id:"frost-guardian", name:"Frost Guardian", type:"Ice", img:"images/frost-guardian.png", maxHp:130,
    attacks:[ {name:"Ice Lance",power:16,accuracy:.95}, {name:"Blizzard Wall",power:24,accuracy:.85} ] },
  { id:"storm-witch", name:"Storm Witch", type:"Lightning", img:"images/storm-witch.png", maxHp:95,
    attacks:[ {name:"Chain Spark",power:22,accuracy:.9}, {name:"Tempest",power:35,accuracy:.65} ] },
  { id:"oak-sentinel", name:"Oak Sentinel", type:"Earth", img:"images/oak-sentinel.png", maxHp:140,
    attacks:[ {name:"Root Slam",power:18,accuracy:.95}, {name:"Stone Quake",power:26,accuracy:.8} ] },
  { id:"tide-singer", name:"Tide Singer", type:"Water", img:"images/tide-singer.png", maxHp:105,
    attacks:[ {name:"Wave Slash",power:20,accuracy:.9}, {name:"Maelstrom",power:30,accuracy:.75} ] },
];

const PACKS = [
  { id:"demo", name:"Demo Pack", price:0,   cards:["shadow-elf","ember-drake"] },
  { id:"dark-elves", name:"Dark Elves Pack", price:200, cards:["shadow-elf","storm-witch"] },
  { id:"dragons", name:"Dragons Pack", price:300, cards:["ember-drake"] },
  { id:"guardians", name:"Guardians Pack", price:250, cards:["oak-sentinel","frost-guardian"] },
];

/* --------- State + helpers --------- */
const views = ["home","select","battle","store"];
const $ = id => document.getElementById(id);
const coinEls = [ $("coinsHome"), $("coinsSelect"), $("coinsBattle"), $("coinsStore") ];

let save = loadSave();
function loadSave(){
  const s = JSON.parse(localStorage.getItem("aca-save")||"null");
  if (s && s.version===1) return s;
  const fresh = { version:1, coins:300, ownedPacks:["demo"] };
  localStorage.setItem("aca-save", JSON.stringify(fresh));
  return fresh;
}
function persist(){ localStorage.setItem("aca-save", JSON.stringify(save)); }
function ownedCardIds(){
  const set = new Set();
  save.ownedPacks.forEach(pid=>{
    const p = PACKS.find(x=>x.id===pid);
    if (p) p.cards.forEach(c=>set.add(c));
  });
  return [...set];
}
function getCard(id){ return CARDS.find(c=>c.id===id); }
function updateCoinsUI(){ coinEls.forEach(el=>el && (el.textContent = save.coins)); }

/* --------- Router --------- */
function show(id){
  views.forEach(v=>{ const el=$(v); if (el) el.classList.add("hidden"); });
  const target=$(id); if (target) target.classList.remove("hidden");
  document.body.classList.remove("main-bg","arena-bg","store-bg");
  if (id==="home") document.body.classList.add("main-bg");
  if (id==="battle") document.body.classList.add("arena-bg");
  if (id==="store") document.body.classList.add("store-bg");
  updateCoinsUI();
}

/* --------- Home --------- */
function enterArena(){
  renderSelect();
  show('select');
}
function setupBreakingNews(){
  const wrap = $("news-container");
  const cards = Array.from(wrap.querySelectorAll(".news-article"));
  const VISIBLE = 3;
  let index = 0;
  let timer;

  function layout(start=0, instant=false){
    cards.forEach((card,i)=>{
      const show = i >= start && i < start + VISIBLE;
      card.style.display = show ? "block" : "none";
      if (!instant){
        card.style.opacity = 0;
        requestAnimationFrame(()=>{
          card.style.transition = "opacity .35s ease";
          card.style.opacity = show ? 1 : 0;
        });
      } else {
        card.style.transition = "none";
        card.style.opacity = show ? 1 : 0;
      }
    });
  }
  function tick(){
    index = (index + 1) % cards.length;
    if (index > cards.length - VISIBLE) index = 0;
    layout(index);
  }
  function start(){ stop(); timer = setInterval(tick, 5000); }
  function stop(){ if (timer) clearInterval(timer); }

  layout(0, true);
  start();
  $("news-section").addEventListener("mouseenter", stop);
  $("news-section").addEventListener("mouseleave", start);
}

/* --------- Select --------- */
function renderSelect(){
  const grid = $("selectGrid");
  grid.innerHTML = "";
  const ids = ownedCardIds();
  const visible = [...new Set([...ids, ...CARDS.map(c=>c.id)])].slice(0, 6);

  visible.forEach(id=>{
    const card = getCard(id);
    const owned = ids.includes(id);
    const div = document.createElement("div");
    div.className = "card";
    div.innerHTML = `
      <h4>${card.name}</h4>
      <img src="${card.img}" alt="${card.name}">
      <div class="muted">${card.type} â€¢ HP ${card.maxHp}</div>
      <button class="btn ${owned ? "primary" : ""}" ${owned ? "" : "disabled"}>
        ${owned ? "Select" : "Locked"}
      </button>
    `;
    div.querySelector("button").onclick = () => owned && startBattle(card.id);
    grid.appendChild(div);
  });
}

/* --------- Battle (multi-attack) --------- */
let battle = null; // {player, ai, pHp, aHp, locked}

function startBattle(playerId){
  const player = JSON.parse(JSON.stringify(getCard(playerId)));
  const aiPool = CARDS.filter(c=>c.id!==playerId);
  const ai = JSON.parse(JSON.stringify(aiPool[Math.floor(Math.random()*aiPool.length)]));
  battle = { player, ai, pHp:player.maxHp, aHp:ai.maxHp, locked:false };
  renderBattle();
  show("battle");
}

function renderBattle(){
  const {player, ai} = battle;
  $("playerZone").innerHTML = cardBattleHtml("You", player, "playerHp");
  $("aiZone").innerHTML     = cardBattleHtml("AI",  ai,     "aiHp");
  updateHpBars();

  const row = $("attackRow");
  row.innerHTML = "";
  player.attacks.forEach((atk,i)=>{
    const b = document.createElement("button");
    b.className = "btn";
    b.textContent = `${atk.name} (${atk.power})`;
    b.onclick = () => playerTurn(i);
    row.appendChild(b);
  });
  $("resultText").textContent = "";
}

function cardBattleHtml(label, card, hpId){
  return `
    <div class="card">
      <h4>${label}</h4>
      <img src="${card.img}" alt="${card.name}">
      <div>${card.name}</div>
      <div class="hp-bar"><div id="${hpId}" class="hp-fill"></div></div>
    </div>
  `;
}

function updateHpBars(){
  $("playerHp").style.width = `${(battle.pHp / battle.player.maxHp) * 100}%`;
  $("aiHp").style.width     = `${(battle.aHp / battle.ai.maxHp) * 100}%`;
}

function playerTurn(i){
  if (battle.locked) return;
  battle.locked = true;
  const atk = battle.player.attacks[i];
  if (Math.random() <= atk.accuracy) battle.aHp = Math.max(0, battle.aHp - atk.power);
  updateHpBars();
  if (checkEnd()) return;
  setTimeout(aiTurn, 700);
}

function aiTurn(){
  const atk = battle.ai.attacks[Math.floor(Math.random() * battle.ai.attacks.length)];
  if (Math.random() <= atk.accuracy) battle.pHp = Math.max(0, battle.pHp - atk.power);
  updateHpBars();
  if (checkEnd()) return;
  battle.locked = false;
}

function checkEnd(){
  if (battle.pHp <= 0 || battle.aHp <= 0){
    $("resultText").textContent =
      (battle.pHp<=0 && battle.aHp<=0) ? "It's a draw!"
      : (battle.pHp<=0) ? "You lose!" : "You win!";
    return true;
  }
  return false;
}

/* --------- Store --------- */
function renderStore(){
  const wrap = $("packList");
  wrap.innerHTML = "";
  PACKS.forEach(p=>{
    const owned = save.ownedPacks.includes(p.id);
    const div = document.createElement("div");
    div.className = "card";
    div.innerHTML = `
      <h4>${p.name}</h4>
      <p class="muted">Contains: ${p.cards.map(id=>getCard(id).name).join(", ")}</p>
      <p class="muted">Price: ${p.price} ðŸª™</p>
      <button class="btn ${owned ? "" : "primary"}" ${owned ? "disabled" : ""}>
        ${owned ? "Owned" : "Buy"}
      </button>
    `;
    const btn = div.querySelector("button");
    if (!owned){
      btn.onclick = ()=>{
        if (save.coins < p.price) { alert("Not enough coins!"); return; }
        save.coins -= p.price;
        save.ownedPacks.push(p.id);
        persist(); updateCoinsUI(); renderStore();
      };
    }
    wrap.appendChild(div);
  });
}

/* --------- Init + Events --------- */
document.addEventListener("DOMContentLoaded", ()=>{
  // Home
  $("homeBattleBtn").addEventListener("click", enterArena);
  $("homeStoreBtn").addEventListener("click", ()=>{ renderStore(); show("store"); });
  $("portal").addEventListener("click", enterArena);

  // Select
  $("selectBackBtn").addEventListener("click", ()=> show("home"));

  // Battle
  $("battleHomeBtn").addEventListener("click", ()=> show("home"));
  $("battleAgainBtn").addEventListener("click", ()=> show("select"));
  $("battleStoreBtn").addEventListener("click", ()=> { renderStore(); show("store"); });

  // Store
  $("storeBackBtn").addEventListener("click", ()=> show("home"));

  updateCoinsUI();
  show("home");
  setupBreakingNews();
});
// Nav routing
document.querySelectorAll('.nav-link').forEach(link=>{
  link.addEventListener('click', e=>{
    e.preventDefault();
    const target = link.getAttribute('data-view');
    if (target === 'store') { renderStore(); }
    if (target === 'select') { renderSelect(); }
    show(target);

    document.querySelectorAll('.nav-link').forEach(a=>a.classList.remove('current'));
    link.classList.add('current');
  });
});


function setNavCurrent(view){
  document.querySelectorAll('.nav-link').forEach(a=>{
    a.classList.toggle('current', a.getAttribute('data-view') === view);
  });
}

